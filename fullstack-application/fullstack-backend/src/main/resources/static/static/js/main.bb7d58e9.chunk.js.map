{"version":3,"sources":["component/SubscriberDataService.js","component/SubscribersListComponent.js","component/SubscriberComponent.js","component/SubscriberApp.js","App.js","serviceWorker.js","index.js"],"names":["SUBSCRIBER_API_URL","SUBSCRIBER_API_URL_SEARCH","axios","get","name","id","delete","user","post","put","SubscribersListComponent","props","state","subscribers","message","deleteSubscriberClicked","bind","updateSubscriberClicked","addCourseClicked","refreshCourses","this","SubscriberDataService","retrieveAllSubscribers","then","response","console","log","setState","data","deleteSubscriber","history","push","className","class","map","subscriber","key","desc","onClick","Component","SubscriberComponent","match","params","username","password","onSubmit","validate","retrieveSubscriber","values","errors","length","createSubscriber","updateSubscriber","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","type","disabled","placeholder","SubscriberApp","basename","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bb7d58e9.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst APP_API_URL = `http://localhost:9090`;\r\nconst SUBSCRIBER_API_URL = `${APP_API_URL}/subscribers`;\r\nconst SUBSCRIBER_API_URL_SEARCH = `${SUBSCRIBER_API_URL}/search}`;\r\n\r\nclass SubscriberDataService {\r\n\r\n    retrieveAllSubscribers() {\r\n        return axios.get(`${SUBSCRIBER_API_URL}`);\r\n    }\r\n\r\n    retrieveSubscribersByName(name) {\r\n        return axios.get(`${SUBSCRIBER_API_URL_SEARCH}/${name}`);\r\n    }\r\n\r\n    retrieveSubscriber(id) {\r\n        return axios.get(`${SUBSCRIBER_API_URL}/${id}`);\r\n    }\r\n\r\n    deleteSubscriber(id) {\r\n        return axios.delete(`${SUBSCRIBER_API_URL}/${id}`);\r\n    }\r\n\r\n    createSubscriber(user) {\r\n        return axios.post(`${SUBSCRIBER_API_URL}`, user);\r\n    }\r\n\r\n    updateSubscriber(id, user) {\r\n        return axios.put(`${SUBSCRIBER_API_URL}`, user);\r\n    }\r\n}\r\n\r\nexport default new SubscriberDataService()","import React, {Component} from \"react\";\r\nimport SubscriberDataService from \"./SubscriberDataService\";\r\n\r\nclass SubscribersListComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            subscribers: [],\r\n            message: null\r\n        }\r\n        this.deleteSubscriberClicked = this.deleteSubscriberClicked.bind(this)\r\n        this.updateSubscriberClicked = this.updateSubscriberClicked.bind(this)\r\n        this.addCourseClicked = this.addCourseClicked.bind(this)\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshCourses();\r\n    }\r\n\r\n    refreshCourses() {\r\n        SubscriberDataService.retrieveAllSubscribers()\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({subscribers: response.data})\r\n                }\r\n            )\r\n    }\r\n\r\n    deleteSubscriberClicked(id) {\r\n        SubscriberDataService.deleteSubscriber(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of subscriber ${id} Successful` })\r\n                    this.refreshCourses()\r\n                }\r\n            )\r\n\r\n    }\r\n\r\n    updateSubscriberClicked(id) {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/subscribers/${id}`)\r\n    }\r\n\r\n    addCourseClicked() {\r\n        this.props.history.push(`/subscribers/-1`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>All Subscribers</h3>\r\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Name</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            this.state.subscribers.map(\r\n                                subscriber =>\r\n                                    <tr key={subscriber.id}>\r\n                                        <td>{subscriber.id}</td>\r\n                                        <td>{subscriber.name}</td>\r\n                                        <td>{subscriber.desc}</td>\r\n                                        <td><button className=\"btn btn-warning\" onClick={() => this.deleteSubscriberClicked(subscriber.id)}>Delete</button></td>\r\n                                        <td><button className=\"btn btn-success\" onClick={() => this.updateSubscriberClicked(subscriber.id)}>Update</button></td>\r\n                                    </tr>\r\n                            )\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addCourseClicked}>Add2</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubscribersListComponent;","import React, {Component} from \"react\";\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\r\nimport SubscriberDataService from \"./SubscriberDataService\";\r\n\r\nclass SubscriberComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            user: {\r\n                id: '',\r\n                name: '',\r\n                username: '',\r\n                password: '',\r\n                desc: ''\r\n            }\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.id)\r\n        if (this.state.id != -1) {\r\n            SubscriberDataService.retrieveSubscriber(this.state.id)\r\n                .then(response => this.setState({\r\n                    user: response.data\r\n                }))\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.user.desc) {\r\n            errors.desc = 'Enter a Description'\r\n        } else if (values.user.desc.length < 5) {\r\n            errors.desc = 'Enter atleast 5 Characters in Description'\r\n        }\r\n\r\n        if (!values.user.name) {\r\n            errors.name = 'Enter subscriber name'\r\n\r\n            return errors\r\n\r\n        }\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let user = {\r\n            id: this.state.id == -1 ? null : values.user.id,\r\n            desc: values.user.desc,\r\n            name: values.user.name,\r\n            username: values.user.username,\r\n            password: values.user.password\r\n        };\r\n\r\n        if (this.state.id == -1) {\r\n            SubscriberDataService.createSubscriber(user)\r\n                .then(() => this.props.history.push('/subscribers'))\r\n        } else {\r\n            SubscriberDataService.updateSubscriber(this.state.id, user)\r\n                .then(() => this.props.history.push('/subscribers'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    render() {\r\n\r\n        let {user} = this.state\r\n\r\n        return (\r\n            <div>\r\n                <h3>Course</h3>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{user}}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"desc\" component=\"div\" className=\"alert alert-warning\"/>\r\n                                    <ErrorMessage name=\"name\" component=\"div\" className=\"alert alert-warning\"/>\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Id</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"user.id\" disabled/>\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"user.name\" placeholder='Enter name'/>\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Username</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"user.username\" placeholder='Enter username'/>\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Password</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"user.password\" placeholder='Enter password'/>\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"user.desc\" placeholder='Enter description'/>\r\n                                    </fieldset>\r\n\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubscriberComponent","import React, {Component} from 'react';\r\nimport SubscribersListComponent from \"./SubscribersListComponent\";\r\nimport SubscriberComponent from \"./SubscriberComponent\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\n\r\nclass SubscriberApp extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename={`/front`}>\r\n                <h1>Subscribers app</h1>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={SubscribersListComponent}/>\r\n                    <Route path=\"/subscribers\" exact component={SubscribersListComponent}/>\r\n                    <Route path=\"/subscribers/:id\" component={SubscriberComponent}/>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubscriberApp","import React, { Component } from 'react';\nimport './App.css';\nimport SubscriberApp from './component/SubscriberApp';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"container\">\n        <SubscriberApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}